// This file exports the current source code of the application as a string map.
// It is used by the assistantService to provide context to the Gemini API for code generation tasks.

export const sourceCode = {
  "index.tsx": `
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
  "metadata.json": `
{
  "name": "Gerador YouTube",
  "description": "Generated by Gemini.",
  "requestFramePermissions": []
}`,
  "index.html": `
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>Gerador YouTube</title>
    <meta name="theme-color" content="#181818">
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              'youtube-black': '#181818',
              'youtube-dark': '#282828',
              'youtube-red': '#FF0000',
              'youtube-white': '#F1F1F1',
              'youtube-gray': '#AAAAAA',
            },
            keyframes: {
              slideUp: {
                '0%': { transform: 'translateY(100%)', opacity: 0 },
                '100%': { transform: 'translateY(0)', opacity: 1 },
              },
              slideDown: {
                '0%': { transform: 'translateY(0)', opacity: 1 },
                '100%': { transform: 'translateY(100%)', opacity: 0 },
              },
               fadeIn: {
                '0%': { opacity: '0', transform: 'scale(0.95)' },
                '100%': { opacity: '1', transform: 'scale(1)' },
              },
              fadeOut: {
                '0%': { opacity: '1' },
                '100%': { opacity: '0' },
              },
              pulse: {
                '0%, 100%': { transform: 'scale(1)', boxShadow: '0 0 0 0 rgba(255, 0, 0, 0.7)' },
                '50%': { transform: 'scale(1.02)', boxShadow: '0 0 0 10px rgba(255, 0, 0, 0)' },
              }
            },
            animation: {
              slideUp: 'slideUp 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards',
              slideDown: 'slideDown 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards',
              fadeIn: 'fadeIn 0.3s ease-out forwards',
              fadeOut: 'fadeOut 0.3s ease-in forwards',
              pulse: 'pulse 2s infinite',
            }
          }
        }
      }
    </script>
    <style>
      /* Custom scrollbar for better aesthetics */
      ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }
      ::-webkit-scrollbar-track {
        background: #181818;
      }
      ::-webkit-scrollbar-thumb {
        background: #282828;
        border-radius: 3px;
      }
      ::-webkit-scrollbar-thumb:hover {
        background: #FF0000;
      }
      html, body, #root {
        height: 100%;
        overflow: hidden;
      }
    </style>
  <script type="importmap">
{
  "imports": {
    "react/": "https://aistudiocdn.com/react@^19.1.1/",
    "react": "https://aistudiocdn.com/react@^19.1.1",
    "react-dom/": "https://aistudiocdn.com/react-dom@^19.1.1/",
    "@google/genai": "https://aistudiocdn.com/@google/genai@^1.19.0"
  }
}
</script>
</head>
  <body class="bg-youtube-black text-youtube-white font-sans">
    <div id="root"></div>
  </body>
</html>`,
  "App.tsx": `
import React, { useState, useCallback, useEffect } from 'react';
import type { Mode, CreateFunction, EditFunction, UploadedImage, AspectRatio } from './types';
import MainView from './components/MainView';
import BottomNav from './components/BottomNav';
import ControlsDrawer from './components/ControlsDrawer';
import CodeModal from './components/CodeModal';
import AssistantButton from './components/AssistantButton';
import AssistantModal from './components/AssistantModal';
import { generateImageApi, editImageApi, fileToGenerativePart, generateVideoApi } from './services/geminiService';
import playSound, { initAudioContext } from './services/audioService';

function App() {
  const [prompt, setPrompt] = useState<string>('');
  const [mode, setMode] = useState<Mode>('create');
  const [createFunction, setCreateFunction] = useState<CreateFunction>('free');
  const [editFunction, setEditFunction] = useState<EditFunction>('add-remove');
  
  const [image1, setImage1] = useState<UploadedImage | null>(null);
  const [image2, setImage2] = useState<UploadedImage | null>(null);
  const [referenceImage, setReferenceImage] = useState<UploadedImage | null>(null);
  
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [generatedImages, setGeneratedImages] = useState<string[] | null>(null);
  const [generatedVideoUrls, setGeneratedVideoUrls] = useState<string[] | null>(null);
  const [videoStatus, setVideoStatus] = useState<string | null>(null);

  const [variationCount, setVariationCount] = useState<number>(1);
  const [aspectRatio, setAspectRatio] = useState<AspectRatio>('16:9');
  const [error, setError] = useState<string | null>(null);

  const [isDrawerOpen, setDrawerOpen] = useState<boolean>(false);
  const [isCodeModalOpen, setCodeModalOpen] = useState<boolean>(false);
  const [isAdultModeUnlocked, setAdultModeUnlocked] = useState<boolean>(false);

  // AI Assistant State
  const [isAssistantOpen, setAssistantOpen] = useState<boolean>(false);
  const [isOnline, setIsOnline] = useState<boolean>(navigator.onLine);

  useEffect(() => {
    initAudioContext();
    
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
        window.removeEventListener('online', handleOnline);
        window.removeEventListener('offline', handleOffline);
    };
  }, []);
  
  useEffect(() => {
    if (error) {
      playSound('error');
      const timer = setTimeout(() => setError(null), 4000);
      return () => clearTimeout(timer);
    }
  }, [error]);

  const handleImageUpload = (file: File, imageSlot: 1 | 2 | 'single' | 'reference') => {
    if (file) {
      const previewUrl = URL.createObjectURL(file);
      const uploadedImage = { file, previewUrl };
      if (imageSlot === 1) setImage1(uploadedImage);
      else if (imageSlot === 2) setImage2(uploadedImage);
      else if (imageSlot === 'reference') setReferenceImage(uploadedImage);
      else setImage1(uploadedImage);
      playSound('click');
    }
  };

  const clearUploads = () => {
    setImage1(null);
    setImage2(null);
    setReferenceImage(null);
  };
  
  const handleModeChange = (newMode: Mode) => {
    playSound('open');
    setMode(newMode);
    clearUploads();
    setGeneratedImages(null);
    setGeneratedVideoUrls(null);
    setDrawerOpen(true);
    if(newMode === 'edit') setCreateFunction('free');
    else setEditFunction('add-remove');
  };

  const generateContent = useCallback(async () => {
    if (!prompt) {
      setError('Por favor, descreva sua ideia.');
      return;
    }
    
    playSound('click');
    setDrawerOpen(false);
    setIsLoading(true);
    setError(null);
    setGeneratedImages(null);
    setGeneratedVideoUrls(null);
    setVideoStatus(null);

    try {
      if (mode === 'video') {
        const videoUrls = await generateVideoApi(prompt, setVideoStatus);
        setGeneratedVideoUrls(videoUrls);
      } else {
        let resultImages: string[] | null = null;
        if (mode === 'create') {
          if (referenceImage) {
              const imagePart = await fileToGenerativePart(referenceImage.file);
              const enhancedPrompt = \`Based on the style, colors, and composition of the provided image, generate a new image depicting: \${prompt}\`;
              const singleResult = await editImageApi(enhancedPrompt, [imagePart], aspectRatio);
              resultImages = singleResult ? [singleResult] : null;
          } else {
              let enhancedPrompt = prompt;
              if (createFunction === 'sticker') enhancedPrompt = \`design a vinyl sticker of \${prompt}, simple, vector, vibrant colors, white background\`;
              if (createFunction === 'text') enhancedPrompt = \`typography logo design for "\${prompt}", clean, modern, vector, on a solid background\`;
              if (createFunction === 'comic') enhancedPrompt = \`\${prompt} in a dynamic comic book panel style, vibrant colors, bold lines, action-packed\`;
              if (createFunction === 'banner') enhancedPrompt = \`"\${prompt}", professional banner design for a website, wide aspect ratio, high resolution, visually appealing\`;
              if (createFunction === 'thumbnail') enhancedPrompt = \`"\${prompt}", eye-catching YouTube thumbnail, vibrant colors, bold text, high contrast, 16:9 aspect ratio\`;
              if (createFunction === 'adult') enhancedPrompt = \`mature themes, nsfw, photorealistic, \${prompt}\`;
              
              resultImages = await generateImageApi(enhancedPrompt, variationCount, aspectRatio);
          }
        } else { // EDIT MODE
          if (!image1) {
            setError('Por favor, envie uma imagem para editar.');
            setIsLoading(false);
            return;
          }
          const imagePart1 = await fileToGenerativePart(image1.file);
          const imageParts = [imagePart1];
          if (editFunction === 'compose' && image2) {
              const imagePart2 = await fileToGenerativePart(image2.file);
              imageParts.push(imagePart2);
          }
          const singleResult = await editImageApi(prompt, imageParts, aspectRatio);
          resultImages = singleResult ? [singleResult] : null;
        }
        
        if (resultImages && resultImages.length > 0) {
          const imagesWithPrefix = resultImages.map(img => \`data:image/png;base64,\${img}\`);
          setGeneratedImages(imagesWithPrefix);
        } else {
          throw new Error('A API não retornou uma imagem.');
        }
      }
      playSound('success');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Ocorreu um erro desconhecido.');
      setVideoStatus(null);
    } finally {
      setIsLoading(false);
    }
  }, [prompt, mode, createFunction, editFunction, image1, image2, referenceImage, variationCount, aspectRatio, isAdultModeUnlocked]);

  const editCurrentImage = (index: number) => {
    if (generatedImages && generatedImages[index]) {
      fetch(generatedImages[index])
        .then(res => res.blob())
        .then(blob => {
          const file = new File([blob], "edited_image.png", { type: "image/png" });
          handleImageUpload(file, 'single');
          setMode('edit');
          setDrawerOpen(true);
          setGeneratedImages(null);
        });
    }
  };

  return (
    <div className="w-full h-full bg-youtube-black flex flex-col overflow-hidden">
        <header className="p-4 text-center">
            <h1 className="text-2xl font-bold tracking-wider text-youtube-white">
                <span className="text-youtube-red">G</span>erador <span className="text-youtube-red">Y</span>ouTube
            </h1>
        </header>

        <MainView
            isLoading={isLoading}
            generatedImages={generatedImages}
            generatedVideoUrls={generatedVideoUrls}
            videoStatus={videoStatus}
            editCurrentImage={editCurrentImage}
            onNewContent={() => {
                setGeneratedImages(null);
                setGeneratedVideoUrls(null);
                handleModeChange('create');
            }}
        />

        <BottomNav
            currentMode={mode}
            onModeChange={handleModeChange}
        />

        <ControlsDrawer
            isOpen={isDrawerOpen}
            onClose={() => setDrawerOpen(false)}
            prompt={prompt}
            setPrompt={setPrompt}
            mode={mode}
            createFunction={createFunction}
            setCreateFunction={setCreateFunction}
            editFunction={editFunction}
            setEditFunction={setEditFunction}
            image1={image1}
            image2={image2}
            referenceImage={referenceImage}
            handleImageUpload={handleImageUpload}
            generateContent={generateContent}
            isLoading={isLoading}
            variationCount={variationCount}
            setVariationCount={setVariationCount}
            isAdultModeUnlocked={isAdultModeUnlocked}
            onLockClick={() => {
                playSound('click');
                setCodeModalOpen(true);
            }}
            aspectRatio={aspectRatio}
            setAspectRatio={setAspectRatio}
            clearUploads={clearUploads}
        />
        
        <AssistantButton onClick={() => setAssistantOpen(true)} />

        <AssistantModal 
            isOpen={isAssistantOpen}
            onClose={() => setAssistantOpen(false)}
            isOnline={isOnline}
        />

        {error && (
            <div className="fixed bottom-20 left-1/2 -translate-x-1/2 bg-youtube-red text-white py-2 px-4 rounded-lg shadow-lg animate-fadeIn z-50" onClick={() => setError(null)}>
                <p><strong>Erro:</strong> {error}</p>
            </div>
        )}

        <CodeModal 
            isOpen={isCodeModalOpen}
            onClose={() => setCodeModalOpen(false)}
            onSuccess={() => {
                playSound('success');
                setAdultModeUnlocked(true);
                setCodeModalOpen(false);
                setCreateFunction('adult');
            }}
        />
    </div>
  );
}

export default App;`,
  "types.ts": `
export type Mode = 'create' | 'edit' | 'video';

export type CreateFunction = 'free' | 'sticker' | 'text' | 'comic' | 'banner' | 'thumbnail' | 'adult';

export type EditFunction = 'add-remove' | 'retouch' | 'style' | 'compose';

export type AspectRatio = '1:1' | '16:9' | '9:16' | '4:3' | '3:4';

export interface UploadedImage {
  file: File;
  previewUrl: string;
}

// Types for AI Assistant
export interface KnowledgeEntry {
    keywords: string[];
    response: string;
}

// --- NEW TYPES for AI Developer ---
export interface ModifiedFile {
    path: string;
    content: string;
}

export interface CodeModification {
    explanation: string;
    files: ModifiedFile[];
}

// --- UPDATED ChatMessage ---
export interface ChatMessage {
    sender: 'user' | 'ai';
    text: string;
    codeModification?: CodeModification;
}`,
  "services/geminiService.ts": `
import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";
import type { Part } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

// Helper to convert File to a base64 string and return a Part object
export const fileToGenerativePart = async (file: File): Promise<Part> => {
    const base64String = await new Promise<string>((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve((reader.result as string).split(',')[1]);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
    return {
        inlineData: {
            mimeType: file.type,
            data: base64String,
        },
    };
};

export const generateImageApi = async (prompt: string, numberOfImages: number = 1, aspectRatio: string = '1:1'): Promise<string[] | null> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: prompt,
            config: {
                numberOfImages: numberOfImages,
                outputMimeType: 'image/png',
                aspectRatio: aspectRatio,
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0) {
            return response.generatedImages.map(img => img.image.imageBytes);
        }
        return null;
    } catch (error) {
        console.error("Error generating image:", error);
        throw new Error("Falha ao gerar a imagem. Verifique o console para mais detalhes.");
    }
};

export const editImageApi = async (prompt: string, images: Part[], aspectRatio: string = '1:1'): Promise<string | null> => {
    try {
        const contents = {
            parts: [...images, { text: \`\${prompt}. The final image should have a \${aspectRatio} aspect ratio.\` }],
        };

        const response: GenerateContentResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: contents,
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData) {
                return part.inlineData.data;
            }
        }
        
        // If no image is returned, check for text which might contain a reason
        for (const part of response.candidates[0].content.parts) {
             if (part.text) {
                throw new Error(\`API returned text instead of image: \${part.text}\`);
            }
        }

        return null;
    } catch (error) {
        console.error("Error editing image:", error);
        throw new Error("Falha ao editar a imagem. Verifique o console para mais detalhes.");
    }
};

export const generateVideoApi = async (prompt: string, onProgress: (status: string) => void): Promise<string[]> => {
    try {
        onProgress("Iniciando a operação de geração de vídeo...");
        let operation = await ai.models.generateVideos({
            model: 'veo-2.0-generate-001',
            prompt: prompt,
            config: {
                numberOfVideos: 2
            }
        });

        onProgress("Operação iniciada. Gerando 2 variações... Isso pode levar alguns minutos.");

        while (!operation.done) {
            await new Promise(resolve => setTimeout(resolve, 10000)); // Poll every 10 seconds
            onProgress("Verificando o status dos vídeos...");
            operation = await ai.operations.getVideosOperation({ operation: operation });
        }

        const generatedVideos = operation.response?.generatedVideos;
        if (!generatedVideos || generatedVideos.length === 0) {
            throw new Error("A API de vídeo não retornou nenhum vídeo.");
        }
        
        onProgress(\`Vídeos gerados com sucesso! Baixando \${generatedVideos.length} arquivos...\`);
        
        const videoUrls = await Promise.all(
            generatedVideos.map(async (videoData) => {
                const downloadLink = videoData?.video?.uri;
                if (!downloadLink) {
                    console.warn("Uma das variações de vídeo não retornou um link para download.");
                    return null;
                }
                const response = await fetch(\`\${downloadLink}&key=\${process.env.API_KEY}\`);
                if (!response.ok) {
                    throw new Error(\`Falha ao baixar o vídeo. Status: \${response.statusText}\`);
                }
                const videoBlob = await response.blob();
                return URL.createObjectURL(videoBlob);
            })
        );
        
        const validUrls = videoUrls.filter((url): url is string => url !== null);

        if (validUrls.length === 0) {
            throw new Error("Falha ao processar os links de download dos vídeos.");
        }
        
        return validUrls;

    } catch (error) {
        console.error("Error generating video:", error);
        throw new Error("Falha ao gerar o vídeo. Verifique o console para mais detalhes.");
    }
};

export const getGenericTextResponse = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                systemInstruction: "Você é um assistente prestativo para um aplicativo de geração de mídia chamado 'Gerador YouTube'. Responda de forma concisa e amigável.",
            }
        });
        return response.text;
    } catch (error) {
        console.error("Error getting text response:", error);
        throw new Error("Não consegui encontrar uma resposta online. Tente novamente mais tarde.");
    }
};`,
  "components/LeftPanel.tsx": `
import React, { useRef } from 'react';
import type { Mode, CreateFunction, EditFunction, UploadedImage, AspectRatio } from '../types';

interface LeftPanelProps {
    prompt: string;
    setPrompt: (prompt: string) => void;
    mode: Mode;
    handleModeChange: (mode: Mode) => void;
    createFunction: CreateFunction;
    setCreateFunction: (func: CreateFunction) => void;
    editFunction: EditFunction;
    handleEditFunctionChange: (func: EditFunction, requiresTwo: boolean) => void;
    showTwoImagesSection: boolean;
    setShowTwoImagesSection: (show: boolean) => void;
    image1: UploadedImage | null;
    image2: UploadedImage | null;
    referenceImage: UploadedImage | null;
    handleImageUpload: (file: File, imageSlot: 1 | 2 | 'single' | 'reference') => void;
    generateContent: () => void;
    isLoading: boolean;
    variationCount: number;
    setVariationCount: (count: number) => void;
    isAdultModeUnlocked: boolean;
    onLockClick: () => void;
    aspectRatio: AspectRatio;
    setAspectRatio: (ratio: AspectRatio) => void;
}

const FunctionCard: React.FC<{
    icon: string;
    name: string;
    isActive: boolean;
    onClick: () => void;
    'data-function': string;
    'data-requires-two'?: boolean;
    isLocked?: boolean;
}> = ({ icon, name, isActive, onClick, isLocked = false, ...dataProps }) => (
    <div
        {...dataProps}
        className={\`function-card p-3 rounded-lg text-center cursor-pointer transition-all duration-300 flex flex-col items-center justify-center aspect-square \${isActive ? 'bg-indigo-600 scale-105 shadow-lg' : 'bg-gray-700 hover:bg-gray-600'}\`}
        onClick={onClick}
    >
        <div className="text-3xl mb-1 relative">
            {icon}
            {isLocked && <span className="absolute -top-1 -right-2 text-base">🔒</span>}
        </div>
        <div className="font-semibold text-sm">{name}</div>
    </div>
);

const UploadArea: React.FC<{
    id: string;
    onUpload: (file: File) => void;
    previewUrl: string | null;
    text: string;
    subtext: string;
    isDual?: boolean;
}> = ({ id, onUpload, previewUrl, text, subtext, isDual = false }) => {
    const inputRef = useRef<HTMLInputElement>(null);
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        if (e.target.files && e.target.files[0]) {
            onUpload(e.target.files[0]);
        }
    };

    return (
        <div 
            className={\`\${isDual ? 'upload-area-dual' : 'upload-area'} w-full border-2 border-dashed border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-indigo-500 transition-colors duration-300 bg-gray-800/50 relative overflow-hidden h-40 flex flex-col items-center justify-center\`}
            onClick={() => inputRef.current?.click()}
        >
            <input
                type="file"
                id={id}
                ref={inputRef}
                className="hidden"
                accept="image/*"
                onChange={handleFileChange}
            />
            {previewUrl ? (
                <img src={previewUrl} alt="Preview" className="image-preview absolute inset-0 w-full h-full object-cover" />
            ) : (
                <>
                    <div className="text-3xl text-gray-400">📁</div>
                    <p className="font-semibold mt-2">{text}</p>
                    <p className="upload-text text-xs text-gray-500">{subtext}</p>
                </>
            )}
        </div>
    );
};

const AspectRatioSelector: React.FC<{ value: AspectRatio, onChange: (value: AspectRatio) => void }> = ({ value, onChange }) => {
    const ratios: { name: string, value: AspectRatio, icon: string }[] = [
        { name: 'Quadrado', value: '1:1', icon: '■' },
        { name: 'Paisagem', value: '16:9', icon: '▬' },
        { name: 'Retrato', value: '9:16', icon: '▮' },
        { name: 'Largo', value: '4:3', icon: '▭' },
        { name: 'Alto', value: '3:4', icon: '▯' },
    ];
    return (
        <div>
            <div className="section-title font-semibold mb-2 text-gray-300">📐 Proporção</div>
            <div className="grid grid-cols-5 gap-2">
                {ratios.map(ratio => (
                    <button 
                        key={ratio.value} 
                        onClick={() => onChange(ratio.value)}
                        title={ratio.name}
                        className={\`p-2 rounded-md flex flex-col items-center justify-center transition-colors duration-200 \${value === ratio.value ? 'bg-indigo-600 font-semibold' : 'bg-gray-700 hover:bg-gray-600'}\`}
                    >
                        <span className="text-xl">{ratio.icon}</span>
                        <span className="text-xs mt-1">{ratio.value}</span>
                    </button>
                ))}
            </div>
        </div>
    );
};


const LeftPanel: React.FC<LeftPanelProps> = ({
    prompt, setPrompt, mode, handleModeChange, createFunction, setCreateFunction,
    editFunction, handleEditFunctionChange, showTwoImagesSection, setShowTwoImagesSection,
    image1, image2, referenceImage, handleImageUpload, generateContent, isLoading, 
    variationCount, setVariationCount, isAdultModeUnlocked, onLockClick,
    aspectRatio, setAspectRatio
}) => {

    const handleAdultClick = () => {
        if (isAdultModeUnlocked) {
            setCreateFunction('adult');
        } else {
            onLockClick();
        }
    };

    return (
        <div className="left-panel w-full md:w-1/3 lg:w-1/4 bg-gray-800 p-6 rounded-2xl shadow-xl flex flex-col gap-6 overflow-y-auto max-h-[95vh]">
            <header className="relative">
                <h1 className="panel-title text-3xl font-bold text-white">🎨 AI Image Studio</h1>
                <p className="panel-subtitle text-gray-400">Gerador profissional de imagens</p>
            </header>

            <div className="prompt-section">
                <div className="section-title font-semibold mb-2 text-gray-300">
                    {mode === 'video' ? '🎬 Descreva seu vídeo' : '💭 Descreva sua ideia'}
                </div>
                <textarea
                    id="prompt"
                    className="prompt-input w-full bg-gray-900 border border-gray-700 rounded-lg p-3 h-28 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-300"
                    placeholder={mode === 'video' ? 'Um astronauta surfando em uma onda cósmica...' : 'Descreva a imagem que você deseja criar...'}
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                ></textarea>
            </div>

            <div className="mode-toggle grid grid-cols-3 gap-2 bg-gray-900 p-1 rounded-lg">
                <button
                    className={\`mode-btn py-2 rounded-md transition-colors duration-300 \${mode === 'create' ? 'bg-indigo-600 font-semibold' : 'hover:bg-gray-700'}\`}
                    onClick={() => handleModeChange('create')}
                >
                    Criar
                </button>
                <button
                    className={\`mode-btn py-2 rounded-md transition-colors duration-300 \${mode === 'edit' ? 'bg-indigo-600 font-semibold' : 'hover:bg-gray-700'}\`}
                    onClick={() => handleModeChange('edit')}
                >
                    Editar
                </button>
                <button
                    className={\`mode-btn py-2 rounded-md transition-colors duration-300 \${mode === 'video' ? 'bg-indigo-600 font-semibold' : 'hover:bg-gray-700'}\`}
                    onClick={() => handleModeChange('video')}
                >
                    Vídeo
                </button>
            </div>

            {mode === 'create' && (
                <>
                    <div id="createFunctions" className="functions-section">
                        <div className="functions-grid grid grid-cols-3 gap-2">
                            <FunctionCard icon="✨" name="Prompt" data-function="free" isActive={createFunction === 'free'} onClick={() => setCreateFunction('free')} />
                            <FunctionCard icon="🏷️" name="Adesivos" data-function="sticker" isActive={createFunction === 'sticker'} onClick={() => setCreateFunction('sticker')} />
                            <FunctionCard icon="📝" name="Logo" data-function="text" isActive={createFunction === 'text'} onClick={() => setCreateFunction('text')} />
                            <FunctionCard icon="💭" name="HQ" data-function="comic" isActive={createFunction === 'comic'} onClick={() => setCreateFunction('comic')} />
                            <FunctionCard icon="🖼️" name="Banner" data-function="banner" isActive={createFunction === 'banner'} onClick={() => setCreateFunction('banner')} />
                            <FunctionCard icon="🎬" name="Thumbnail" data-function="thumbnail" isActive={createFunction === 'thumbnail'} onClick={() => setCreateFunction('thumbnail')} />
                            <FunctionCard icon="🔞" name="Adulto" data-function="adult" isActive={createFunction === 'adult'} onClick={handleAdultClick} isLocked={!isAdultModeUnlocked} />
                        </div>
                    </div>
                    <AspectRatioSelector value={aspectRatio} onChange={setAspectRatio} />
                </>
            )}
            
            {mode === 'video' && (
                 <div className="flex flex-col gap-4">
                    <div className="bg-gray-900 p-3 rounded-lg text-center">
                         <p className="text-sm font-bold text-indigo-300">Sempre geramos 2 variações de vídeo</p>
                         <p className="text-xs text-gray-400">Compare os resultados e escolha o melhor.</p>
                    </div>
                </div>
            )}

            {mode === 'edit' && !showTwoImagesSection && (
                 <>
                    <div id="editFunctions" className="functions-section">
                        <div className="functions-grid grid grid-cols-2 gap-4">
                            <FunctionCard icon="➕" name="Adicionar" data-function="add-remove" isActive={editFunction === 'add-remove'} onClick={() => handleEditFunctionChange('add-remove', false)} />
                            <FunctionCard icon="🎯" name="Retoque" data-function="retouch" isActive={editFunction === 'retouch'} onClick={() => handleEditFunctionChange('retouch', false)} />
                            <FunctionCard icon="🎨" name="Estilo" data-function="style" isActive={editFunction === 'style'} onClick={() => handleEditFunctionChange('style', false)} />
                            <FunctionCard icon="🖼️" name="Unir" data-function="compose" data-requires-two={true} isActive={editFunction === 'compose'} onClick={() => handleEditFunctionChange('compose', true)} />
                        </div>
                    </div>
                     <AspectRatioSelector value={aspectRatio} onChange={setAspectRatio} />
                </>
            )}
            
            {showTwoImagesSection && (
                <div id="twoImagesSection" className="functions-section flex flex-col gap-4">
                    <div className="section-title font-semibold text-gray-300">📸 Duas Imagens Necessárias</div>
                    <UploadArea id="imageUpload1" onUpload={(file) => handleImageUpload(file, 1)} previewUrl={image1?.previewUrl || null} text="Primeira Imagem" subtext="Clique para selecionar" isDual={true} />
                    <UploadArea id="imageUpload2" onUpload={(file) => handleImageUpload(file, 2)} previewUrl={image2?.previewUrl || null} text="Segunda Imagem" subtext="Clique para selecionar" isDual={true} />
                    <button className="back-btn self-start text-indigo-400 hover:text-indigo-300 transition-colors" onClick={() => setShowTwoImagesSection(false)}>
                        ← Voltar para Edição
                    </button>
                </div>
            )}

            <div className="dynamic-content mt-auto flex flex-col gap-4">
                {mode === 'create' && (
                  <>
                    <div className="reference-image-section">
                        <div className="section-title font-semibold mb-2 text-gray-300">🖼️ Imagem de Referência (Opcional)</div>
                         <UploadArea id="imageUploadRef" onUpload={(file) => handleImageUpload(file, 'reference')} previewUrl={referenceImage?.previewUrl || null} text="Usar como inspiração" subtext="PNG, JPG, WebP" />
                    </div>
                    <div className={\`variation-options transition-opacity duration-300 \${referenceImage ? 'opacity-50' : 'opacity-100'}\`}>
                        <label htmlFor="variation-slider" className="section-title font-semibold mb-2 text-gray-300 block">
                            🔢 Número de Variações ({variationCount})
                        </label>
                        <input
                            id="variation-slider"
                            type="range"
                            min="1"
                            max="3"
                            value={variationCount}
                            onChange={(e) => setVariationCount(parseInt(e.target.value, 10))}
                            className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-indigo-500"
                            disabled={!!referenceImage}
                        />
                    </div>
                  </>
                )}

                {mode === 'edit' && !showTwoImagesSection && (
                    <UploadArea id="imageUpload" onUpload={(file) => handleImageUpload(file, 'single')} previewUrl={image1?.previewUrl || null} text="Clique ou arraste para manipular" subtext="PNG, JPG, WebP (máx. 10MB)" />
                )}
                
                <button
                    id="generateBtn"
                    className="generate-btn w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-bold py-3 px-4 rounded-lg mt-2 flex items-center justify-center hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                    onClick={generateContent}
                    disabled={isLoading}
                >
                    {isLoading ? (
                        <>
                            <div className="spinner w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                            <span className="btn-text">Gerando...</span>
                        </>
                    ) : (
                        <span className="btn-text">
                            🚀 Gerar {mode === 'video' ? 'Vídeo' : 'Imagem'}
                        </span>
                    )}
                </button>
            </div>
        </div>
    );
};

export default LeftPanel;`,
  "components/RightPanel.tsx": `
import React from 'react';
import type { Mode } from '../types';

interface RightPanelProps {
    mode: Mode;
    isLoading: boolean;
    generatedImages: string[] | null;
    generatedVideoUrls: string[] | null;
    videoStatus: string | null;
    selectedImageIndex: number;
    setSelectedImageIndex: (index: number) => void;
    editCurrentImage: () => void;
}

const RightPanel: React.FC<RightPanelProps> = ({ mode, isLoading, generatedImages, generatedVideoUrls, videoStatus, selectedImageIndex, setSelectedImageIndex, editCurrentImage }) => {

    const downloadImage = () => {
        if (!generatedImages || generatedImages.length === 0) return;
        const link = document.createElement('a');
        link.href = generatedImages[selectedImageIndex];
        link.download = \`ai-image-\${Date.now()}-\${selectedImageIndex + 1}.png\`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const selectedImage = generatedImages ? generatedImages[selectedImageIndex] : null;

    const renderContent = () => {
        if (isLoading) {
            return (
                 <div id="loadingContainer" className="loading-container text-center text-gray-400">
                    <div className="loading-spinner w-16 h-16 border-4 border-t-transparent border-indigo-500 rounded-full animate-spin mx-auto"></div>
                    <div className="loading-text mt-4 text-lg">
                        {mode === 'video' && videoStatus ? videoStatus : "Gerando sua imagem..."}
                    </div>
                </div>
            );
        }

        if (mode === 'video' && generatedVideoUrls && generatedVideoUrls.length > 0) {
            return (
                <div className="w-full h-full flex flex-col md:flex-row items-center justify-center gap-6">
                    {generatedVideoUrls.map((videoUrl, index) => (
                        <div key={index} className="flex flex-col items-center justify-center gap-3 w-full md:w-1/2 max-h-full">
                             <p className="font-semibold text-gray-300">Variação {index + 1}</p>
                            <video
                                src={videoUrl}
                                controls
                                autoPlay
                                loop
                                className="w-full h-auto max-h-[70%] rounded-lg shadow-2xl"
                            />
                            <a
                                href={videoUrl}
                                download={\`ai-video-\${Date.now()}-var\${index + 1}.mp4\`}
                                className="action-btn w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center text-2xl hover:bg-indigo-600 transition-colors"
                                title={\`Download Variação \${index + 1}\`}
                            >
                                💾
                            </a>
                        </div>
                    ))}
                </div>
            )
        }

        if ((mode === 'create' || mode === 'edit') && generatedImages && selectedImage) {
            return (
                 <div id="imageContainer" className="w-full h-full flex flex-col items-center justify-center gap-4">
                    <div className="flex-grow flex items-center justify-center w-full max-h-[calc(100%-140px)]">
                         <img id="generatedImage" src={selectedImage} alt="Generated Art" className="generated-image max-w-full max-h-full object-contain rounded-lg shadow-2xl" />
                    </div>
                   
                    <div className="w-full flex flex-col items-center gap-4">
                        <div className="image-actions flex gap-4 p-2 bg-gray-900/50 rounded-full">
                            <button className="action-btn w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center text-2xl hover:bg-indigo-600 transition-colors" onClick={editCurrentImage} title="Editar">
                                ✏️
                            </button>
                            <button className="action-btn w-12 h-12 bg-gray-700 rounded-full flex items-center justify-center text-2xl hover:bg-indigo-600 transition-colors" onClick={downloadImage} title="Download">
                                💾
                            </button>
                        </div>

                        {generatedImages.length > 1 && (
                            <div className="w-full max-w-xl overflow-x-auto p-2">
                                <div className="flex justify-center gap-3">
                                    {generatedImages.map((img, index) => (
                                        <img
                                            key={index}
                                            src={img}
                                            alt={\`Variation \${index + 1}\`}
                                            className={\`w-20 h-20 object-cover rounded-md cursor-pointer transition-all duration-200 flex-shrink-0 \${selectedImageIndex === index ? 'ring-4 ring-indigo-500 scale-105' : 'ring-2 ring-transparent hover:ring-indigo-400'}\`}
                                            onClick={() => setSelectedImageIndex(index)}
                                        />
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )
        }

        // Default placeholder
        return (
             <div id="resultPlaceholder" className="result-placeholder text-center text-gray-500">
                <div className="result-placeholder-icon text-7xl">🎨</div>
                <div className="mt-4 text-2xl">Sua obra de arte aparecerá aqui</div>
            </div>
        )
    }

    return (
        <div className="right-panel w-full md:w-2/3 lg:w-3/4 bg-gray-800/50 p-6 rounded-2xl flex items-center justify-center min-h-[50vh] md:min-h-0 relative overflow-hidden hidden md:flex">
           {renderContent()}
        </div>
    );
};

export default RightPanel;`,
  "components/MobileModal.tsx": `

import React, { useState, useEffect } from 'react';

interface MobileModalProps {
    isOpen: boolean;
    onClose: () => void;
    images: string[] | null;
    onEdit: (index: number) => void;
    onNew: () => void;
}

const MobileModal: React.FC<MobileModalProps> = ({ isOpen, onClose, images, onEdit, onNew }) => {
    const [currentIndex, setCurrentIndex] = useState(0);

    useEffect(() => {
        if (isOpen) {
            setCurrentIndex(0);
        }
    }, [isOpen]);

    if (!isOpen || !images || images.length === 0) return null;
    
    const downloadFromModal = () => {
        const imageSrc = images[currentIndex];
        if (!imageSrc) return;
        const link = document.createElement('a');
        link.href = imageSrc;
        link.download = \`ai-image-\${Date.now()}-\${currentIndex + 1}.png\`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    
    const editFromModal = () => {
        onEdit(currentIndex);
        onClose();
    };
    
    const newImageFromModal = () => {
        onNew();
        onClose();
    };

    const nextImage = () => {
        setCurrentIndex((prev) => (prev + 1) % images.length);
    };

    const prevImage = () => {
        setCurrentIndex((prev) => (prev - 1 + images.length) % images.length);
    };

    return (
        <div id="mobileModal" className="mobile-modal fixed inset-0 bg-black bg-opacity-80 flex flex-col items-center justify-center z-50 p-4 md:hidden">
            <div className="modal-content w-full max-w-md bg-gray-800 rounded-2xl p-4 flex flex-col items-center gap-4">
                <div className="relative w-full">
                    <img id="modalImage" src={images[currentIndex]} alt="Generated Art" className="modal-image w-full rounded-lg" />
                    {images.length > 1 && (
                        <>
                            <button onClick={prevImage} className="absolute left-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full text-lg leading-none">‹</button>
                            <button onClick={nextImage} className="absolute right-2 top-1/2 -translate-y-1/2 bg-black/50 text-white p-2 rounded-full text-lg leading-none">›</button>
                            <div className="absolute bottom-2 left-1/2 -translate-x-1/2 bg-black/70 text-white text-xs px-2 py-1 rounded-full">
                                {currentIndex + 1} / {images.length}
                            </div>
                        </>
                    )}
                </div>
                <div id="modal-actions" className="modal-actions grid grid-cols-3 gap-2 w-full">
                     <button className="modal-btn edit bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 rounded-lg flex items-center justify-center gap-2" onClick={editFromModal}>
                        ✏️ Editar
                    </button>
                    <button className="modal-btn download bg-green-600 hover:bg-green-700 text-white font-semibold py-3 rounded-lg flex items-center justify-center gap-2" onClick={downloadFromModal}>
                        💾 Salvar
                    </button>
                     <button className="modal-btn new bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 rounded-lg flex items-center justify-center gap-2" onClick={newImageFromModal}>
                        ✨ Nova
                    </button>
                </div>
            </div>
        </div>
    );
};

export default MobileModal;`,
  "components/CodeModal.tsx": `
import React, { useState, useEffect } from 'react';
import playSound from '../services/audioService';

interface CodeModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSuccess: () => void;
}

const CORRECT_CODE = "47534420";

const CodeModal: React.FC<CodeModalProps> = ({ isOpen, onClose, onSuccess }) => {
    const [code, setCode] = useState('');
    const [error, setError] = useState('');
    const [shouldRender, setShouldRender] = useState(isOpen);

    useEffect(() => {
        if (isOpen) {
            setShouldRender(true);
            setCode('');
            setError('');
        }
    }, [isOpen]);

    const onAnimationEnd = () => {
        if (!isOpen) setShouldRender(false);
    };

    const handleClose = () => {
        playSound('click');
        onClose();
    };
    
    const handleSubmit = () => {
        playSound('click');
        if (code === CORRECT_CODE) {
            onSuccess();
        } else {
            playSound('error');
            setError('Código incorreto. Tente novamente.');
            setCode('');
        }
    };
    
    if (!shouldRender) return null;
    const animationClass = isOpen ? 'animate-fadeIn' : 'animate-fadeOut';

    return (
        <div className={\`fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4 \${animationClass}\`} onAnimationEnd={onAnimationEnd}>
            <div className="bg-youtube-dark p-6 rounded-lg shadow-xl text-white w-full max-w-sm">
                <h2 className="text-xl font-bold mb-4">Acesso Restrito 🔞</h2>
                <p className="text-youtube-gray mb-4 text-sm">Insira o código de acesso para desbloquear o modo de criação de conteúdo adulto.</p>
                <input 
                    type="password" 
                    value={code}
                    onChange={(e) => setCode(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}
                    className="w-full bg-youtube-black border border-youtube-gray/50 rounded p-2 mb-2 text-center text-lg tracking-widest focus:ring-2 focus:ring-youtube-red"
                    placeholder="****"
                    autoFocus
                />
                {error && <p className="text-youtube-red/80 text-sm mb-4">{error}</p>}
                <div className="flex justify-end gap-4 mt-4">
                    <button onClick={handleClose} className="py-2 px-4 rounded bg-youtube-gray/50 hover:bg-youtube-gray/80 transition-colors">Cancelar</button>
                    <button onClick={handleSubmit} className="py-2 px-4 rounded bg-youtube-red hover:bg-opacity-80 transition-colors font-semibold">Desbloquear</button>
                </div>
            </div>
        </div>
    );
};

export default CodeModal;`,
  "components/PixModal.tsx": `
import React, { useState } from 'react';

interface PixModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSuccess: () => void;
}

const FAKE_PIX_CODE = "00020126580014br.gov.bcb.pix0136123e4567-e89b-12d3-a456-4266141740005204000053039865802BR5913NOME DO VENDEDOR6008BRASILIA62070503***6304E4A9";

const PixModal: React.FC<PixModalProps> = ({ isOpen, onClose, onSuccess }) => {
    const [isConfirming, setIsConfirming] = useState(false);
    const [copied, setCopied] = useState(false);

    const handleConfirmPayment = () => {
        setIsConfirming(true);
        // Simulate API call to check payment status
        setTimeout(() => {
            onSuccess();
            setIsConfirming(false);
        }, 2500);
    };

    const handleCopy = () => {
        navigator.clipboard.writeText(FAKE_PIX_CODE);
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
            <div className="bg-gray-800 p-6 rounded-lg shadow-xl text-white w-full max-w-md text-center">
                <h2 className="text-2xl font-bold mb-2 text-yellow-400">✨ Acesso Ilimitado</h2>
                <p className="text-gray-300 mb-4">Finalize o pagamento via PIX para gerar vídeos sem limites.</p>

                <div className="bg-white p-4 rounded-lg inline-block">
                    <svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
                        <path fill="#000" d="M0 0h200v200H0z"/>
                        <path fill="#FFF" d="M40 40h40v40H40zm80 0h40v40h-40zM40 120h40v40H40zm50-30h20v20h-20zm-30 0h20v20H60zm60 0h20v20h-20zm-30 30h20v20h-20zM70 70h20v20H70zm60 0h20v20h-20zm-30-30h20v20h-20zm-10 80h20v20h-20zm30 10h20v20h-20zm-50-20h20v20H70zm20-20h20v20H90zm20 20h20v20h-20z"/>
                        <path fill="#000" d="M60 60h20v20H60zm80 0h20v20h-20zM60 140h20v20H60z"/>
                    </svg>
                </div>
                
                <p className="text-gray-400 mt-4 mb-2 text-sm">Ou use o PIX Copia e Cola:</p>

                <div className="relative">
                    <input 
                        type="text" 
                        readOnly 
                        value={FAKE_PIX_CODE}
                        className="w-full bg-gray-900 border border-gray-700 rounded p-2 pr-16 text-xs text-gray-400 truncate"
                    />
                    <button 
                        onClick={handleCopy}
                        className="absolute right-1 top-1/2 -translate-y-1/2 bg-indigo-600 text-white text-xs font-bold py-1 px-2 rounded hover:bg-indigo-500 transition-colors"
                    >
                        {copied ? 'Copiado!' : 'Copiar'}
                    </button>
                </div>
                
                <div className="flex flex-col gap-4 mt-6">
                    <button 
                        onClick={handleConfirmPayment} 
                        className="w-full py-3 px-4 rounded bg-green-600 hover:bg-green-500 transition-colors font-bold flex items-center justify-center disabled:opacity-50"
                        disabled={isConfirming}
                    >
                         {isConfirming ? (
                            <>
                                <div className="spinner w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                                Verificando...
                            </>
                         ) : (
                            'Já paguei, verificar'
                         )}
                    </button>
                    <button onClick={onClose} className="py-2 px-4 rounded bg-gray-600/50 hover:bg-gray-600 transition-colors text-sm">
                        Fechar
                    </button>
                </div>
            </div>
        </div>
    );
};

export default PixModal;`,
  "services/audioService.ts": `
// Create a singleton audio context
let audioContext: AudioContext | null = null;

const initializeAudio = () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    }
};

const playSound = (type: 'click' | 'success' | 'error' | 'open') => {
    // User must interact with the page first for audio to play
    if (!audioContext || audioContext.state === 'suspended') {
        audioContext?.resume();
    }
    if (!audioContext) return;


    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();

    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);

    gainNode.gain.setValueAtTime(0.15, audioContext.currentTime); // Volume

    switch (type) {
        case 'click':
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(440.0, audioContext.currentTime); // A4
            gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.1);
            break;
        case 'open':
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(660.0, audioContext.currentTime); 
            gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.15);
            break;
        case 'success':
            oscillator.type = 'sine';
            oscillator.frequency.setValueAtTime(523.25, audioContext.currentTime); // C5
            oscillator.frequency.exponentialRampToValueAtTime(783.99, audioContext.currentTime + 0.1); // G5
            gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.2);
            break;
        case 'error':
            oscillator.type = 'square';
            oscillator.frequency.setValueAtTime(220.0, audioContext.currentTime); // A3
            oscillator.frequency.exponentialRampToValueAtTime(110.0, audioContext.currentTime + 0.2);
            gainNode.gain.exponentialRampToValueAtTime(0.0001, audioContext.currentTime + 0.3);
            break;
    }

    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.3);
};

// Export a function to be called on the first user interaction
export const initAudioContext = () => {
    const init = () => {
        initializeAudio();
        document.body.removeEventListener('click', init);
        document.body.removeEventListener('touchstart', init);
    };
    document.body.addEventListener('click', init, { once: true });
    document.body.addEventListener('touchstart', init, { once: true });
};

export default playSound;`,
  "components/BottomNav.tsx": `
import React from 'react';
import type { Mode } from '../types';

interface BottomNavProps {
    currentMode: Mode;
    onModeChange: (mode: Mode) => void;
}

const NavButton: React.FC<{
    icon: string;
    label: string;
    isActive: boolean;
    onClick: () => void;
}> = ({ icon, label, isActive, onClick }) => (
    <button
        onClick={onClick}
        className={\`flex flex-col items-center justify-center gap-1 w-full transition-all duration-300 transform \${isActive ? 'text-youtube-red' : 'text-youtube-gray hover:text-youtube-white'}\`}
    >
        <span className="text-2xl">{icon}</span>
        <span className={\`text-xs font-semibold \${isActive ? 'opacity-100' : 'opacity-0'}\`}>{label}</span>
    </button>
);

const BottomNav: React.FC<BottomNavProps> = ({ currentMode, onModeChange }) => {
    return (
        <nav className="w-full bg-youtube-dark p-2 mt-auto shadow-[0_-5px_15px_-5px_rgba(0,0,0,0.5)]">
            <div className="flex justify-around items-start h-16">
                <NavButton
                    icon="🎨"
                    label="Criar"
                    isActive={currentMode === 'create'}
                    onClick={() => onModeChange('create')}
                />
                <NavButton
                    icon="✏️"
                    label="Editar"
                    isActive={currentMode === 'edit'}
                    onClick={() => onModeChange('edit')}
                />
                <NavButton
                    icon="🎥"
                    label="Vídeo"
                    isActive={currentMode === 'video'}
                    onClick={() => onModeChange('video')}
                />
            </div>
        </nav>
    );
};

export default BottomNav;`,
  "components/ControlsDrawer.tsx": `
import React, { useRef, useState, useEffect } from 'react';
import type { Mode, CreateFunction, EditFunction, UploadedImage, AspectRatio } from '../types';
import playSound from '../services/audioService';

interface ControlsDrawerProps {
    isOpen: boolean;
    onClose: () => void;
    prompt: string;
    setPrompt: (prompt: string) => void;
    mode: Mode;
    createFunction: CreateFunction;
    setCreateFunction: (func: CreateFunction) => void;
    editFunction: EditFunction;
    setEditFunction: (func: EditFunction) => void;
    image1: UploadedImage | null;
    image2: UploadedImage | null;
    referenceImage: UploadedImage | null;
    handleImageUpload: (file: File, imageSlot: 1 | 2 | 'single' | 'reference') => void;
    generateContent: () => void;
    isLoading: boolean;
    variationCount: number;
    setVariationCount: (count: number) => void;
    isAdultModeUnlocked: boolean;
    onLockClick: () => void;
    aspectRatio: AspectRatio;
    setAspectRatio: (ratio: AspectRatio) => void;
    clearUploads: () => void;
}

const FunctionCard: React.FC<{
    icon: string; name: string; isActive: boolean; onClick: () => void; isLocked?: boolean;
}> = ({ icon, name, isActive, onClick, isLocked = false }) => (
    <div
        className={\`p-2 rounded-lg text-center cursor-pointer transition-all duration-300 flex flex-col items-center justify-center aspect-square \${isActive ? 'bg-youtube-red scale-105 shadow-lg' : 'bg-youtube-dark hover:bg-gray-700'}\`}
        onClick={onClick}
    >
        <div className="text-2xl mb-1 relative">
            {icon}
            {isLocked && <span className="absolute -top-1 -right-2 text-xs">🔒</span>}
        </div>
        <div className="font-semibold text-[10px]">{name}</div>
    </div>
);

const UploadArea: React.FC<{ id: string; onUpload: (file: File) => void; previewUrl: string | null; text: string; }> = ({ id, onUpload, previewUrl, text }) => {
    const inputRef = useRef<HTMLInputElement>(null);
    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => (e.target.files && e.target.files[0]) && onUpload(e.target.files[0]);

    return (
        <div 
            className="w-full h-24 border-2 border-dashed border-youtube-gray/50 rounded-lg text-center cursor-pointer hover:border-youtube-red transition-colors duration-300 bg-youtube-black relative overflow-hidden flex flex-col items-center justify-center"
            onClick={() => inputRef.current?.click()}
        >
            <input type="file" id={id} ref={inputRef} className="hidden" accept="image/*" onChange={handleFileChange} />
            {previewUrl ? (
                <img src={previewUrl} alt="Preview" className="absolute inset-0 w-full h-full object-cover" />
            ) : (
                <>
                    <div className="text-2xl text-youtube-gray">📁</div>
                    <p className="font-semibold text-xs mt-1">{text}</p>
                </>
            )}
        </div>
    );
};

const AspectRatioSelector: React.FC<{ value: AspectRatio, onChange: (value: AspectRatio) => void }> = ({ value, onChange }) => {
    const ratios: { name: string, value: AspectRatio, icon: string }[] = [
        { name: 'Paisagem', value: '16:9', icon: '▬' },
        { name: 'Retrato', value: '9:16', icon: '▮' },
        { name: 'Quadrado', value: '1:1', icon: '■' },
    ];
    return (
        <div className="w-full">
            <div className="text-sm font-semibold mb-2 text-youtube-gray">Proporção</div>
            <div className="grid grid-cols-3 gap-2">
                {ratios.map(ratio => (
                    <button 
                        key={ratio.value} 
                        onClick={() => { playSound('click'); onChange(ratio.value); }}
                        title={ratio.name}
                        className={\`p-2 rounded-md flex flex-col items-center justify-center transition-colors duration-200 \${value === ratio.value ? 'bg-youtube-red font-semibold' : 'bg-youtube-dark hover:bg-gray-700'}\`}
                    >
                        <span className="text-lg">{ratio.icon}</span>
                        <span className="text-[10px] mt-1">{ratio.value}</span>
                    </button>
                ))}
            </div>
        </div>
    );
};

const ControlsDrawer: React.FC<ControlsDrawerProps> = (props) => {
    const { isOpen, onClose, prompt, setPrompt, mode, aspectRatio, setAspectRatio, generateContent, isLoading } = props;
    const [shouldRender, setShouldRender] = useState(isOpen);
    const [showTwoImages, setShowTwoImages] = useState(false);

    useEffect(() => {
        if (isOpen) setShouldRender(true);
    }, [isOpen]);

    const onAnimationEnd = () => {
        if (!isOpen) setShouldRender(false);
    };
    
    const handleClose = () => {
        playSound('click');
        onClose();
    };

    const handleCreateFuncClick = (func: CreateFunction) => {
        playSound('click');
        props.setCreateFunction(func);
    };

    const handleEditFuncClick = (func: EditFunction, requiresTwo: boolean) => {
        playSound('click');
        props.setEditFunction(func);
        setShowTwoImages(requiresTwo);
        props.clearUploads();
    };

    const handleAdultClick = () => {
        if (props.isAdultModeUnlocked) handleCreateFuncClick('adult');
        else props.onLockClick();
    };

    const animationClass = isOpen ? 'animate-slideUp' : 'animate-slideDown';
    if (!shouldRender) return null;

    return (
        <div className="fixed inset-0 z-30" onAnimationEnd={onAnimationEnd}>
            <div className="absolute inset-0 bg-black/70" onClick={handleClose}></div>
            <div className={\`absolute bottom-0 left-0 right-0 bg-youtube-dark rounded-t-2xl shadow-2xl p-4 flex flex-col gap-4 max-h-[85vh] \${animationClass}\`}>
                <div className="w-12 h-1.5 bg-youtube-gray/50 rounded-full mx-auto mb-2" onClick={handleClose}></div>
                <div className="flex-grow overflow-y-auto pr-2 flex flex-col gap-4">
                    <textarea
                        className="prompt-input w-full bg-youtube-black border border-youtube-gray/50 rounded-lg p-3 h-24 focus:ring-2 focus:ring-youtube-red focus:border-youtube-red transition-colors duration-300 text-sm"
                        placeholder={mode === 'video' ? 'Um gato DJ em uma festa na lua...' : 'Descreva sua ideia...'}
                        value={prompt}
                        onChange={(e) => setPrompt(e.target.value)}
                    ></textarea>

                    {mode === 'create' && (
                        <>
                            <div className="grid grid-cols-4 gap-2">
                                <FunctionCard icon="✨" name="Prompt" isActive={props.createFunction === 'free'} onClick={() => handleCreateFuncClick('free')} />
                                <FunctionCard icon="🏷️" name="Adesivo" isActive={props.createFunction === 'sticker'} onClick={() => handleCreateFuncClick('sticker')} />
                                <FunctionCard icon="📝" name="Logo" isActive={props.createFunction === 'text'} onClick={() => handleCreateFuncClick('text')} />
                                <FunctionCard icon="💭" name="HQ" isActive={props.createFunction === 'comic'} onClick={() => handleCreateFuncClick('comic')} />
                                <FunctionCard icon="🖼️" name="Banner" isActive={props.createFunction === 'banner'} onClick={() => handleCreateFuncClick('banner')} />
                                <FunctionCard icon="🎬" name="Thumb" isActive={props.createFunction === 'thumbnail'} onClick={() => handleCreateFuncClick('thumbnail')} />
                                <FunctionCard icon="🔞" name="Adulto" isActive={props.createFunction === 'adult'} onClick={handleAdultClick} isLocked={!props.isAdultModeUnlocked} />
                            </div>
                            <AspectRatioSelector value={aspectRatio} onChange={setAspectRatio} />
                            <UploadArea id="imageUploadRef" onUpload={(f) => props.handleImageUpload(f, 'reference')} previewUrl={props.referenceImage?.previewUrl || null} text="Imagem de Referência (Opcional)" />
                             <div className={\`transition-opacity duration-300 \${props.referenceImage ? 'opacity-50' : 'opacity-100'}\`}>
                                <label className="text-sm font-semibold mb-2 text-youtube-gray block">Variações ({props.variationCount})</label>
                                <input type="range" min="1" max="3" value={props.variationCount} onChange={(e) => props.setVariationCount(parseInt(e.target.value, 10))} className="w-full h-2 bg-youtube-black rounded-lg appearance-none cursor-pointer accent-youtube-red" disabled={!!props.referenceImage} />
                            </div>
                        </>
                    )}

                    {mode === 'edit' && !showTwoImages && (
                        <>
                            <div className="grid grid-cols-4 gap-2">
                                <FunctionCard icon="➕" name="Adicionar" isActive={props.editFunction === 'add-remove'} onClick={() => handleEditFuncClick('add-remove', false)} />
                                <FunctionCard icon="🎯" name="Retoque" isActive={props.editFunction === 'retouch'} onClick={() => handleEditFuncClick('retouch', false)} />
                                <FunctionCard icon="🎨" name="Estilo" isActive={props.editFunction === 'style'} onClick={() => handleEditFuncClick('style', false)} />
                                <FunctionCard icon="🖼️" name="Unir" isActive={props.editFunction === 'compose'} onClick={() => handleEditFuncClick('compose', true)} />
                            </div>
                            <AspectRatioSelector value={aspectRatio} onChange={setAspectRatio} />
                            <UploadArea id="imageUpload" onUpload={(f) => props.handleImageUpload(f, 'single')} previewUrl={props.image1?.previewUrl || null} text="Enviar imagem para editar" />
                        </>
                    )}
                    
                    {mode === 'edit' && showTwoImages && (
                        <div className="flex flex-col gap-2">
                            <UploadArea id="imageUpload1" onUpload={(f) => props.handleImageUpload(f, 1)} previewUrl={props.image1?.previewUrl || null} text="Primeira Imagem" />
                            <UploadArea id="imageUpload2" onUpload={(f) => props.handleImageUpload(f, 2)} previewUrl={props.image2?.previewUrl || null} text="Segunda Imagem" />
                            <button className="self-start text-youtube-red/80 hover:text-youtube-red transition-colors text-sm" onClick={() => setShowTwoImages(false)}>← Voltar</button>
                        </div>
                    )}
                     {mode === 'video' && (
                         <div className="bg-youtube-black p-3 rounded-lg text-center">
                             <p className="text-sm font-bold text-youtube-red/80">Sempre geramos 2 variações de vídeo</p>
                         </div>
                    )}
                </div>
                <button
                    className={\`w-full bg-youtube-red text-white font-bold py-4 px-4 rounded-lg flex items-center justify-center transition-all duration-300 transform disabled:opacity-50 disabled:cursor-not-allowed \${!isLoading && 'animate-pulse'}\`}
                    onClick={generateContent}
                    disabled={isLoading}
                >
                    {isLoading ? <div className="w-6 h-6 border-2 border-t-transparent border-white rounded-full animate-spin"></div> : \`🚀 Gerar \${mode.charAt(0).toUpperCase() + mode.slice(1)}\`}
                </button>
            </div>
        </div>
    );
};

export default ControlsDrawer;`,
  "components/MainView.tsx": `
import React, { useRef } from 'react';

interface MainViewProps {
    isLoading: boolean;
    generatedImages: string[] | null;
    generatedVideoUrls: string[] | null;
    videoStatus: string | null;
    editCurrentImage: (index: number) => void;
    onNewContent: () => void;
}

const ActionButton: React.FC<{ icon: string, title: string, onClick?: () => void, href?: string, download?: string }> = 
({ icon, title, onClick, href, download }) => {
    const commonProps = {
        className: "w-14 h-14 bg-youtube-dark/80 rounded-full flex items-center justify-center text-2xl hover:bg-youtube-red transition-all duration-200 transform hover:scale-110 backdrop-blur-sm",
        title: title,
    };
    if (href) {
        return <a {...commonProps} href={href} download={download}>{icon}</a>;
    }
    return <button {...commonProps} onClick={onClick}>{icon}</button>;
};


const MainView: React.FC<MainViewProps> = ({ isLoading, generatedImages, generatedVideoUrls, videoStatus, editCurrentImage, onNewContent }) => {
    
    const scrollContainerRef = useRef<HTMLDivElement>(null);

    const renderContent = () => {
        if (isLoading) {
            return (
                <div className="text-center text-youtube-gray">
                    <div className="w-16 h-16 border-4 border-t-transparent border-youtube-red rounded-full animate-spin mx-auto"></div>
                    <div className="mt-4 text-lg animate-pulse">
                        {videoStatus ? videoStatus : "Gerando sua arte..."}
                    </div>
                </div>
            );
        }

        const hasContent = (generatedImages && generatedImages.length > 0) || (generatedVideoUrls && generatedVideoUrls.length > 0);

        if (hasContent) {
            const items = generatedImages || generatedVideoUrls || [];
            const isVideo = !!generatedVideoUrls;
            
            return (
                <div className="w-full h-full flex flex-col items-center justify-center gap-4">
                     <div ref={scrollContainerRef} className="w-full flex-1 flex overflow-x-auto snap-x snap-mandatory scroll-smooth">
                        {items.map((itemSrc, index) => (
                             <div key={index} className="w-full h-full flex-shrink-0 snap-center flex items-center justify-center relative p-4">
                                {isVideo ? (
                                    <video src={itemSrc} controls autoPlay loop className="max-w-full max-h-full object-contain rounded-lg shadow-2xl" />
                                ) : (
                                    <img src={itemSrc} alt={\`Generated Art \${index + 1}\`} className="max-w-full max-h-full object-contain rounded-lg shadow-2xl" />
                                )}
                                <div className="absolute bottom-6 flex gap-4">
                                     {!isVideo && <ActionButton icon="✏️" title="Editar" onClick={() => editCurrentImage(index)} />}
                                     <ActionButton 
                                        icon="💾" 
                                        title="Download" 
                                        href={itemSrc}
                                        download={\`gerador-youtube-\${Date.now()}.\${isVideo ? 'mp4' : 'png'}\`}
                                    />
                                </div>
                             </div>
                        ))}
                    </div>
                    {items.length > 1 && (
                        <div className="text-center pb-2">
                           <p className="text-sm text-youtube-gray">Deslize para ver as variações</p>
                        </div>
                    )}
                </div>
            );
        }

        // Default placeholder
        return (
            <div className="text-center text-youtube-gray/50">
                <div className="text-7xl">🎨</div>
                <div className="mt-4 text-xl">Sua obra de arte aparecerá aqui</div>
            </div>
        );
    }

    return (
        <main className="flex-grow p-4 flex items-center justify-center overflow-hidden">
           {renderContent()}
        </main>
    );
};

export default MainView;`,
  "services/assistantService.ts": `
import type { KnowledgeEntry } from '../types';
import { getGenericTextResponse } from './geminiService';

const KNOWLEDGE_BASE_KEY = 'gyt_assistant_knowledge';
let knowledgeBase: KnowledgeEntry[] = [];

const initialKnowledge: KnowledgeEntry[] = [
    // Greeting & Identity
    { keywords: ['oi', 'ola', 'quem', 'voce', 'e'], response: 'Olá! Eu sou seu assistente de IA pessoal do Gerador YouTube. Estou aqui para ajudar você a criar imagens e vídeos incríveis. Como posso ajudar?' },
    { keywords: ['o', 'que', 'faz', 'voce'], response: 'Eu posso te ajudar a usar o aplicativo, dar dicas de como escrever bons prompts, explicar funcionalidades e tirar suas dúvidas sobre o app e também sobre programação. Pergunte o que quiser!' },
    { keywords: ['offline', 'funciona'], response: 'Sim! Eu funciono offline usando o conhecimento que já aprendi. Se você me perguntar algo novo enquanto estiver online, eu aprenderei a resposta e a salvarei para o futuro.' },
    // App Functionality
    { keywords: ['criar', 'imagem', 'gerar'], response: "Para criar uma imagem, vá para a aba 'Criar', escreva sua ideia no campo de texto, escolha uma função (como 'Prompt' ou 'Adesivo'), ajuste a proporção e as variações, e clique em 'Gerar Imagem'." },
    { keywords: ['editar', 'foto', 'manipular'], response: "Para editar, vá para a aba 'Editar', envie uma imagem, descreva a alteração que você quer fazer (ex: 'adicione um chapéu de sol') e clique em 'Gerar Imagem'." },
    { keywords: ['video', 'fazer', 'gerar'], response: "Para gerar vídeos, selecione a aba 'Vídeo', descreva a cena que você imagina e clique em 'Gerar Vídeo'. O app sempre criará duas variações para você escolher." },
    { keywords: ['variacoes', 'que', 'sao'], response: "Variações são diferentes resultados gerados a partir do mesmo prompt. Isso te dá mais opções criativas para escolher a que mais gosta." },
    { keywords: ['proporcao', 'aspect', 'ratio', 'mudar'], response: "A proporção (ou aspect ratio) define o formato da sua imagem. '16:9' é ideal para thumbnails (paisagem), '9:16' para stories (retrato) e '1:1' é um quadrado perfeito." },
    { keywords: ['referencia', 'imagem'], response: "Usar uma imagem de referência no modo 'Criar' permite que a IA se inspire no estilo, cores e composição da sua imagem para criar algo totalmente novo, mas com uma vibe parecida." },
    { keywords: ['adulto', 'desbloquear', 'codigo'], response: "O modo adulto permite gerar conteúdo para maiores de 18 anos. Para desbloquear, você precisa de um código de acesso especial. Ele existe para proteger usuários mais jovens." },
    { keywords: ['unir', 'imagens', 'duas'], response: "A função 'Unir' no modo 'Editar' permite combinar duas imagens. Você precisa enviar duas fotos e descrever como elas devem ser mescladas." },
    // Prompting Tips
    { keywords: ['dicas', 'prompt', 'bom', 'escrever'], response: "Para um bom prompt, seja descritivo! Use adjetivos, especifique o estilo (ex: 'foto realista', 'desenho animado'), o ambiente e a iluminação. Ex: 'Um gato astronauta flutuando no espaço, com nebulosas coloridas ao fundo, estilo arte digital'." },
    // Troubleshooting
    { keywords: ['erro', 'falhou', 'nao', 'gerou'], response: "Se a geração falhar, tente simplificar seu prompt. Às vezes, prompts muito complexos ou ambíguos podem causar erros. Verifique também sua conexão com a internet." },
    { keywords: ['demorando', 'video', 'lento'], response: "A geração de vídeo é um processo complexo e pode levar alguns minutos. Por favor, aguarde enquanto a IA trabalha na sua criação. O app te manterá informado sobre o status." },

    // Programming - General
    { keywords: ['api', 'o', 'que', 'e'], response: 'Uma API (Application Programming Interface) é um conjunto de regras que permite que diferentes aplicativos "conversem" entre si. É como um garçom que pega seu pedido (requisição) e o leva para a cozinha (servidor), trazendo a resposta de volta para você.' },
    { keywords: ['json', 'o', 'que', 'e'], response: 'JSON (JavaScript Object Notation) é um formato de texto leve para troca de dados. É fácil para humanos lerem e para máquinas analisarem. Pense nele como uma forma universal de organizar informações com chaves e valores, como um dicionário.' },

    // Programming - HTML
    { keywords: ['html', 'o', 'que', 'e'], response: 'HTML (HyperText Markup Language) é a linguagem de marcação padrão para criar páginas web. É o "esqueleto" de um site, definindo a estrutura do conteúdo com elementos como títulos, parágrafos e links.' },
    { keywords: ['div', 'p', 'h1', 'tags', 'html'], response: 'Tags HTML são os blocos de construção de uma página. \`<h1>\` é um título principal, \`<p>\` é um parágrafo e \`<div>\` é um contêiner genérico usado para agrupar outros elementos e aplicar estilos.' },

    // Programming - CSS
    { keywords: ['css', 'o', 'que', 'e', 'estilo'], response: 'CSS (Cascading Style Sheets) é a linguagem que usamos para estilizar uma página HTML. É o que dá cor, define fontes, layouts e torna o site visualmente atraente. É a "roupa" do esqueleto HTML.' },
    { keywords: ['flexbox', 'grid', 'css'], response: 'Flexbox e Grid são sistemas de layout em CSS para organizar elementos na página. Flexbox é ideal para layouts em uma dimensão (uma linha ou uma coluna), enquanto o Grid é mais poderoso para layouts em duas dimensões (linhas e colunas).' },

    // Programming - JavaScript
    { keywords: ['javascript', 'js', 'o', 'que', 'e'], response: 'JavaScript (ou JS) é uma linguagem de programação que torna as páginas web interativas. Ela permite criar animações, responder a cliques de botões, buscar dados e muito mais. É o "cérebro" que dá vida à página.' },
    { keywords: ['variavel', 'const', 'let', 'javascript'], response: "Em JavaScript, \`let\` e \`const\` são usadas para declarar variáveis (recipientes para armazenar dados). Use \`let\` para valores que podem mudar e \`const\` para valores que não mudarão (constantes)." },
    { keywords: ['funcao', 'function', 'javascript'], response: 'Uma função em JavaScript é um bloco de código projetado para executar uma tarefa específica. Ela pode ser chamada (invocada) várias vezes, ajudando a organizar e reutilizar o código.' },

    // Programming - React
    { keywords: ['react', 'o', 'que', 'e'], response: 'React é uma biblioteca JavaScript para construir interfaces de usuário, especialmente "Single Page Applications" (SPAs). Ele permite criar componentes de UI reutilizáveis que gerenciam seu próprio estado.' },
    { keywords: ['componente', 'react'], response: 'Em React, um componente é uma peça de UI independente e reutilizável. Pense em uma página web dividida em blocos: um botão, um formulário, um cabeçalho... cada um pode ser um componente.' },
    { keywords: ['jsx', 'react', 'o', 'que', 'e'], response: 'JSX (JavaScript XML) é uma extensão de sintaxe para JavaScript que se parece muito com HTML. Ele permite que você escreva a estrutura da sua UI diretamente no código JavaScript, tornando os componentes React mais fáceis de ler e escrever.' },
    { keywords: ['estado', 'state', 'usestate', 'react'], response: 'O "estado" (state) em React é um objeto que armazena dados que podem mudar ao longo do tempo em um componente. Quando o estado muda, o React re-renderiza o componente para refletir essa mudança. O hook \`useState\` é a forma padrão de adicionar estado a um componente.' },
];

const loadKnowledgeBase = (): void => {
    try {
        const storedKnowledge = localStorage.getItem(KNOWLEDGE_BASE_KEY);
        if (storedKnowledge) {
            knowledgeBase = JSON.parse(storedKnowledge);
        } else {
            knowledgeBase = initialKnowledge;
            localStorage.setItem(KNOWLEDGE_BASE_KEY, JSON.stringify(knowledgeBase));
        }
    } catch (error) {
        console.error("Failed to load knowledge base:", error);
        knowledgeBase = initialKnowledge;
    }
};

const saveKnowledgeBase = (): void => {
    try {
        localStorage.setItem(KNOWLEDGE_BASE_KEY, JSON.stringify(knowledgeBase));
    } catch (error) {
        console.error("Failed to save knowledge base:", error);
    }
};

const findBestResponse = (normalizedPrompt: string): string | null => {
    let bestMatch = { score: 0, response: '' };
    const promptWords = new Set(normalizedPrompt.split(' '));

    for (const entry of knowledgeBase) {
        let currentScore = 0;
        for (const keyword of entry.keywords) {
            if (promptWords.has(keyword)) {
                currentScore++;
            }
        }
        if (currentScore > bestMatch.score) {
            bestMatch = { score: currentScore, response: entry.response };
        }
    }

    // Require a minimum score to consider it a match
    return bestMatch.score > 0 ? bestMatch.response : null;
};

const addNewKnowledge = (prompt: string, response: string): void => {
    const keywords = prompt
        .toLowerCase()
        .replace(/[^\\w\\s]/gi, '')
        .split(' ')
        .filter(word => word.length > 2); // Simple keyword extraction

    knowledgeBase.push({ keywords: [...new Set(keywords)], response });
    saveKnowledgeBase();
}

export const getAssistantResponse = async (prompt: string, isOnline: boolean): Promise<string> => {
    if (knowledgeBase.length === 0) {
        loadKnowledgeBase();
    }

    const normalizedPrompt = prompt.toLowerCase().replace(/[^\\w\\s]/gi, '');
    const localResponse = findBestResponse(normalizedPrompt);

    if (localResponse) {
        return localResponse;
    }

    if (isOnline) {
        try {
            const onlineResponse = await getGenericTextResponse(prompt);
            addNewKnowledge(prompt, onlineResponse);
            return onlineResponse;
        } catch (error) {
            return error instanceof Error ? error.message : "Desculpe, não consegui obter uma resposta online.";
        }
    }

    return "Eu ainda não tenho a resposta para isso. Pergunte-me novamente quando você estiver online, e eu aprenderei!";
};

// Initialize on load
loadKnowledgeBase();`,
  "components/AssistantButton.tsx": `
import React from 'react';
import playSound from '../services/audioService';

interface AssistantButtonProps {
    onClick: () => void;
}

const AssistantButton: React.FC<AssistantButtonProps> = ({ onClick }) => {
    
    const handleClick = () => {
        playSound('open');
        onClick();
    };

    return (
        <button
            onClick={handleClick}
            className="fixed bottom-20 right-4 w-16 h-16 bg-gradient-to-br from-youtube-red to-red-800 rounded-full shadow-2xl z-40 flex items-center justify-center text-white transform transition-transform duration-300 hover:scale-110 focus:outline-none focus:ring-4 focus:ring-red-400"
            aria-label="Abrir Assistente de IA"
        >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10c5.515 0 10-4.486 10-10S17.515 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z"></path>
                <path d="M12 7c-2.757 0-5 2.243-5 5s2.243 5 5 5 5-2.243 5-5-2.243-5-5-5zm0 8c-1.654 0-3-1.346-3-3s1.346-3 3-3 3 1.346 3 3-1.346 3-3 3z"></path>
                <path d="M12 9c-1.654 0-3 1.346-3 3s1.346 3 3 3 3-1.346 3-3-1.346-3-3-3zm0 4c-.551 0-1-.449-1-1s.449-1 1-1 1 .449 1 1-.449 1-1 1z"></path>
            </svg>
        </button>
    );
};

export default AssistantButton;`,
  "components/AssistantModal.tsx": `
import React, { useState, useEffect, useRef } from 'react';
import type { ChatMessage } from '../types';
import { getAssistantResponse } from '../services/assistantService';
import playSound from '../services/audioService';

interface AssistantModalProps {
    isOpen: boolean;
    onClose: () => void;
    isOnline: boolean;
}

const AssistantModal: React.FC<AssistantModalProps> = ({ isOpen, onClose, isOnline }) => {
    const [messages, setMessages] = useState<ChatMessage[]>([]);
    const [userInput, setUserInput] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [shouldRender, setShouldRender] = useState(isOpen);
    const messagesEndRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        if (isOpen) {
            setShouldRender(true);
            if (messages.length === 0) {
                setMessages([{ sender: 'ai', text: 'Olá! Como posso ajudar você a usar o Gerador YouTube hoje?' }]);
            }
        }
    }, [isOpen, messages.length]);

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const onAnimationEnd = () => {
        if (!isOpen) setShouldRender(false);
    };

    const handleClose = () => {
        playSound('click');
        onClose();
    };

    const handleSend = async () => {
        if (!userInput.trim() || isLoading) return;
        
        playSound('click');
        const newUserMessage: ChatMessage = { sender: 'user', text: userInput };
        setMessages(prev => [...prev, newUserMessage]);
        setUserInput('');
        setIsLoading(true);

        const responseText = await getAssistantResponse(userInput, isOnline);
        
        const newAiMessage: ChatMessage = { sender: 'ai', text: responseText };
        setMessages(prev => [...prev, newAiMessage]);
        setIsLoading(false);
        playSound('success');
    };

    if (!shouldRender) return null;
    const animationClass = isOpen ? 'animate-fadeIn' : 'animate-fadeOut';

    return (
        <div className={\`fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4 \${animationClass}\`} onAnimationEnd={onAnimationEnd}>
            <div className="bg-youtube-dark rounded-2xl shadow-xl text-white w-full max-w-lg h-[80vh] flex flex-col">
                <header className="p-4 border-b border-youtube-gray/30 flex justify-between items-center">
                    <div>
                        <h2 className="text-lg font-bold">Assistente IA</h2>
                        <div className="flex items-center gap-2 text-xs text-youtube-gray">
                            <span className={\`w-2 h-2 rounded-full \${isOnline ? 'bg-green-500' : 'bg-red-500'}\`}></span>
                            <span>{isOnline ? 'Online' : 'Offline'}</span>
                        </div>
                    </div>
                    <button onClick={handleClose} className="text-2xl text-youtube-gray hover:text-white">&times;</button>
                </header>
                
                <div className="flex-grow p-4 overflow-y-auto">
                    {messages.map((msg, index) => (
                        <div key={index} className={\`flex mb-4 \${msg.sender === 'user' ? 'justify-end' : 'justify-start'}\`}>
                            <div className={\`py-2 px-4 rounded-2xl max-w-[80%] \${msg.sender === 'user' ? 'bg-youtube-red text-white rounded-br-none' : 'bg-youtube-dark text-youtube-white rounded-bl-none border border-youtube-gray/30'}\`}>
                                <p className="text-sm">{msg.text}</p>
                            </div>
                        </div>
                    ))}
                    {isLoading && (
                         <div className="flex justify-start mb-4">
                            <div className="py-2 px-4 rounded-2xl bg-youtube-dark text-youtube-white rounded-bl-none border border-youtube-gray/30">
                                <div className="flex items-center gap-2">
                                    <div className="w-2 h-2 bg-youtube-gray rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                                    <div className="w-2 h-2 bg-youtube-gray rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                                    <div className="w-2 h-2 bg-youtube-gray rounded-full animate-bounce"></div>
                                </div>
                            </div>
                        </div>
                    )}
                    <div ref={messagesEndRef} />
                </div>
                
                <footer className="p-4 border-t border-youtube-gray/30">
                    <div className="flex items-center bg-youtube-black rounded-full p-1">
                        <input
                            type="text"
                            value={userInput}
                            onChange={(e) => setUserInput(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && handleSend()}
                            placeholder="Pergunte-me algo..."
                            className="flex-grow bg-transparent px-4 py-2 text-sm focus:outline-none"
                            disabled={isLoading}
                        />
                        <button onClick={handleSend} disabled={!userInput.trim() || isLoading} className="w-10 h-10 bg-youtube-red rounded-full flex items-center justify-center disabled:opacity-50">
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                            </svg>
                        </button>
                    </div>
                </footer>
            </div>
        </div>
    );
};

export default AssistantModal;`,
};
